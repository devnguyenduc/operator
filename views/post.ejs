<!DOCTYPE html>
<html>

<head>
  <title>Dev Writter</title>
  <!-- Copyright (c) 2012 Design Science, Inc. -->
  <!-- Bootstrap-->
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css"
    integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
  <script src="https://code.jquery.com/jquery-3.2.1.slim.min.js"
    integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN"
    crossorigin="anonymous"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js"
    integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q"
    crossorigin="anonymous"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js"
    integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl"
    crossorigin="anonymous"></script>

  <script type="text/javascript"
    src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-MML-AM_CHTML">
    </script>
  <script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    showProcessingMessages: false,
    tex2jax: { inlineMath: [['$','$'],['\\(','\\)']] }
  });
</script>
</head>

<body>
  <div class="container-fluid">
    <div class="row">
      <div class="col-6">
        Dev Write:<br />
        <textarea id="MathInput" cols="90" rows="15" onkeyup="Preview.Update()" style="margin-top:5px"></textarea>
        <br />
        <button onclick="Preview.Save()">Copy Right!</button>
        <br /><br />
      </div>
      <div class="col-6">
        Preview is shown here:
        <!-- Ta có thể sử dụng hàm Math Preview này để load toàn bộ dữ liệu từ file Json và hiển thị nó -->
        <div id="MathPreview" style="border:1px solid; padding: 3px; width:100%; margin-top:5px;"></div>
        <div id="MathBuffer" style="border:1px solid; padding: 3px; widows: 100px; margin-top:5px; 
visibility:hidden; position:absolute; top:0; left: 0"></div>
        <br />
      </div>
      <div class="col-12">
        Non MathJax shown here:
        <p id="NonMathJax" style="border:1px solid; padding: 3px; width:100%; margin-top:5px;">

        </p>
      </div>
    </div>
  </div>





  <script>
  </script>
  <script type="text/javascript">

    var Preview = {
      delay: 100,        // delay after keystroke before updating

      preview: null,     // filled in by Init below
      buffer: null,      // filled in by Init below

      timeout: null,     // store setTimout id
      mjRunning: false,  // true when MathJax is processing
      oldText: null,     // used to check if an update is needed

      //
      //  Get the preview and buffer DIV's
      //
      Init: function () {
        this.preview = document.getElementById("MathPreview");
        this.buffer = document.getElementById("MathBuffer");
      },

      //
      //  Switch the buffer and preview, and display the right one.
      //  (We use visibility:hidden rather than display:none since
      //  the results of running MathJax are more accurate that way.)
      //
      SwapBuffers: function () {
        var buffer = this.preview, preview = this.buffer;
        this.buffer = buffer; this.preview = preview;
        buffer.style.visibility = "hidden"; buffer.style.position = "absolute";
        preview.style.position = ""; preview.style.visibility = "";
      },

      //
      //  This gets called when a key is pressed in the textarea.
      //  We check if there is already a pending update and clear it if so.
      //  Then set up an update to occur after a small delay (so if more keys
      //    are pressed, the update won't occur until after there has been 
      //    a pause in the typing).
      //  The callback function is set up below, after the Preview object is set up.
      //
      Update: function () {
        if (this.timeout) { clearTimeout(this.timeout) }
        this.timeout = setTimeout(this.callback, this.delay);
        this.preText = MathInput.value;
      },

      Save: function () {
        this.Update();
        NonMathJax.innerText = this.preText;
        var copyText = document.getElementById("MathInput");
        copyText.select();
        document.execCommand("copy");
        console.log(copyText.value);
      },
      //
      //  Creates the preview and runs MathJax on it.
      //  If MathJax is already trying to render the code, return
      //  If the text hasn't changed, return
      //  Otherwise, indicate that MathJax is running, and start the
      //    typesetting.  After it is done, call PreviewDone.
      //  
      CreatePreview: function () {
        Preview.timeout = null;
        if (this.mjRunning) return;
        var text = document.getElementById("MathInput").value;
        if (text === this.oldtext) return;
        this.buffer.innerHTML = this.oldText = text;
        this.mjRunning = true;
        MathJax.Hub.Queue(
          ["Typeset", MathJax.Hub, this.buffer],
          ["PreviewDone", this]
        );
      },

      //
      //  Indicate that MathJax is no longer running,
      //  and swap the buffers to show the results.
      //
      PreviewDone: function () {
        this.mjRunning = false;
        this.SwapBuffers();
      }

    };

    //
    //  Cache a callback to the CreatePreview action
    //
    Preview.callback = MathJax.Callback(["CreatePreview", Preview]);
    Preview.callback.autoReset = true;  // make sure it can run more than once

  </script>
  <script>
    Preview.Init();
  </script>

</body>

</html>